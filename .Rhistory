raw_url<-"https://raw.githubusercontent.com/AI-Biotechnology-Bioinformatics/AI_and_Omics_Research_Internship_2025/refs/heads/main/DEGs_Data_1.csv"
file_name<-"DEGs_Data_1.csv"
download(url=raw_url,destfile =file_name)
download(url=raw_url,"DEGs_Data_1.csv" =file_name)
install.packages("downloader")
library(downloader)
download(url=raw_url,destfile =file_name)
raw_url<-"https://raw.githubusercontent.com/AI-Biotechnology-Bioinformatics/AI_and_Omics_Research_Internship_2025/refs/heads/main/DEGs_Data_2.csv"
file_name<-"DEGs_Data_2.csv"
download(url=raw_url,destfile =file_name)
raw_url<-"https://raw.githubusercontent.com/AI-Biotechnology-Bioinformatics/AI_and_Omics_Research_Internship_2025/refs/heads/main/DEGs_Data_2.csv"
file_name<-"DEGs_Data_2.csv"
download(url=raw_url,destfile =file_name)
# STEP 1 — Define the classify_gene() function
############################################################
classify_gene <- function(logFC, padj) {
# Replace missing padj (if any leak through) with 1
if (is.na(padj)) padj <- 1
if (!is.na(logFC) && padj < 0.05 && logFC > 1) {
"Upregulated"
} else if (!is.na(logFC) && padj < 0.05 && logFC < -1) {
"Downregulated"
} else {
"Not_Significant"
}
}
############################################################
# STEP 2 — Set inputs and ensure the Results/ folder exists
############################################################
# Handle filename casing variants (Data vs data) robustly
input_files <- c(
if (file.exists("DEGs_Data_1.csv")) "DEGs_Data_1.csv" else "DEGs_data_1.csv",
if (file.exists("DEGs_Data_2.csv")) "DEGs_Data_2.csv" else "DEGs_data_2.csv"
)
output_dir <- "Results"
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)
############################################################
# STEP 3 — For-loop over both datasets
############################################################
for (file in input_files) {
if (!file.exists(file)) {
cat("\n[WARNING]", file, "not found. Skipping.\n")
next
}
# Read data
df <- read.csv(file, stringsAsFactors = FALSE)
# Coerce numeric columns in case they were read as text
if (!"padj"  %in% names(df)) stop("Column 'padj' missing in ", file)
if (!"logFC" %in% names(df)) stop("Column 'logFC' missing in ", file)
df$padj  <- suppressWarnings(as.numeric(df$padj))
df$logFC <- suppressWarnings(as.numeric(df$logFC))
##########################################################
# STEP 4 — Replace missing padj with 1
##########################################################
df$padj[is.na(df$padj)] <- 1
##########################################################
# STEP 5 — Add new column 'status' using classify_gene()
##########################################################
df$status <- mapply(classify_gene, df$logFC, df$padj)
##########################################################
# STEP 6 — Save processed file into Results/
##########################################################
out_path <- file.path(output_dir, paste0("processed_", basename(file)))
write.csv(df, out_path, row.names = FALSE)
##########################################################
# STEP 7 — Print summaries using table()
##########################################################
cat("\nSummary for", basename(file), ":\n")
# (a) Significant vs Not (padj < 0.05)
t_sig <- table(Significant = df$padj < 0.05)
print(t_sig)
# (b) Status counts (Upregulated / Downregulated / Not_Significant)
t_status <- table(df$status)
print(t_status)
# (Optional clarity: show the three requested counts explicitly, derived via table())
sig_count  <- if ("TRUE" %in% names(t_sig)) as.integer(t_sig[["TRUE"]]) else 0L
up_count   <- if ("Upregulated" %in% names(t_status)) as.integer(t_status[["Upregulated"]]) else 0L
down_count <- if ("Downregulated" %in% names(t_status)) as.integer(t_status[["Downregulated"]]) else 0L
cat("Significant genes (padj < 0.05):", sig_count, "\n")
cat("Upregulated genes:", up_count, "\n")
cat("Downregulated genes:", down_count, "\n")
}
